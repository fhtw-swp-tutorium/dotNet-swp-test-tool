// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Test.Command
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Command")]
    public partial class CommandFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Command.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("de-DE"), "Command", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Es existiert ein Invoker der eine Methode mit dem Attribut InvokeCommand hat")]
        public virtual void EsExistiertEinInvokerDerEineMethodeMitDemAttributInvokeCommandHat()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Es existiert ein Invoker der eine Methode mit dem Attribut InvokeCommand hat", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
 testRunner.Given("mindestens ein Invoker", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Der InvokeCommand hat genau einen Paramter und dieser ist ein Interface")]
        public virtual void DerInvokeCommandHatGenauEinenParamterUndDieserIstEinInterface()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Der InvokeCommand hat genau einen Paramter und dieser ist ein Interface", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("mindestens ein Invoker", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line 8
 testRunner.Then("hat die InvokeCommand Methode genau einen Parameter und dieser ist ein Interface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Es gibt mindestens eine Implementierung des Interface Paramteres der InvokeComman" +
            "d Methode")]
        public virtual void EsGibtMindestensEineImplementierungDesInterfaceParamteresDerInvokeCommandMethode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Es gibt mindestens eine Implementierung des Interface Paramteres der InvokeComman" +
                    "d Methode", ((string[])(null)));
#line 10
this.ScenarioSetup(scenarioInfo);
#line 11
 testRunner.Given("mindestens ein Invoker", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line 12
 testRunner.Then("hat die InvokeCommand Methode genau einen Parameter und dieser ist ein Interface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line 13
 testRunner.Then("hat der Interface Parameter der InvokeCommand Methode mindestens eine Implementie" +
                    "rung", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Wenn die InovkeCommand Methode aufgerufen wird, wird mindestens eine Methode des " +
            "Commands aufgerufen")]
        public virtual void WennDieInovkeCommandMethodeAufgerufenWirdWirdMindestensEineMethodeDesCommandsAufgerufen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Wenn die InovkeCommand Methode aufgerufen wird, wird mindestens eine Methode des " +
                    "Commands aufgerufen", ((string[])(null)));
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
 testRunner.Given("mindestens ein Invoker", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line 18
 testRunner.Then("hat die InvokeCommand Methode genau einen Parameter und dieser ist ein Interface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line 19
 testRunner.When("man die die InvokeCommand Methode mit dem Command \"TestCommand\" aufruft", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 20
 testRunner.Then("wurde mindestens eine Methode des \"TestCommand\" aufgerufen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
