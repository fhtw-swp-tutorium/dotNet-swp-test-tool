// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tests.ExerciseOne
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Observer")]
    public partial class ObserverFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Observer.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("de-DE"), "Observer", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Es existiert mindest ein Subjekt")]
        public virtual void EsExistiertMindestEinSubjekt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Es existiert mindest ein Subjekt", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
 testRunner.Given("Zugriff auf alle verfügbaren Subjekte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line 5
 testRunner.Then("existiert mindestens ein Subjekt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subjekte haben eine Register Methode")]
        public virtual void SubjekteHabenEineRegisterMethode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subjekte haben eine Register Methode", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("Zugriff auf alle verfügbaren Subjekte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line 9
 testRunner.Then("existiert mindestens ein Subjekt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line 10
 testRunner.Then("sollen alle Subjekte eine Reigster Methode haben", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subjekte haben eine Unregister Methode")]
        public virtual void SubjekteHabenEineUnregisterMethode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subjekte haben eine Unregister Methode", ((string[])(null)));
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
 testRunner.Given("Zugriff auf alle verfügbaren Subjekte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line 14
 testRunner.Then("existiert mindestens ein Subjekt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line 15
 testRunner.Then("sollen alle Subjekte eine Reigster Methode haben", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subjekte haben eine Update Methode")]
        public virtual void SubjekteHabenEineUpdateMethode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subjekte haben eine Update Methode", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line 18
 testRunner.Given("Zugriff auf alle verfügbaren Subjekte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line 19
 testRunner.Then("existiert mindestens ein Subjekt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line 20
 testRunner.Then("sollen alle Subjekte eine Update Methode haben", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Observer kann sich bei Subjekt registieren")]
        public virtual void ObserverKannSichBeiSubjektRegistieren()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Observer kann sich bei Subjekt registieren", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
 testRunner.Given("Zugriff auf alle verfügbaren Subjekte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line 24
 testRunner.Then("existiert mindestens ein Subjekt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line 25
 testRunner.Then("sollen alle Subjekte eine Reigster Methode haben", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line 26
 testRunner.Then("sollen alle Subjekte eine Update Methode haben", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line 27
 testRunner.When("sich bei jedem Subjekt ein Observer mit den Namen \"TestObserver\" registiert", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 28
 testRunner.When("alle Subjekte die Update Methode Aufrufen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 29
 testRunner.When("alle Subjekte die Update Methode Aufrufen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 30
 testRunner.Then("sollen \"TestObserver\" \"2\" mal aufgerufen worden sein", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
