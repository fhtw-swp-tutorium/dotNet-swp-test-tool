// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tests.ExerciseOne
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Observer")]
    public partial class ObserverFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Observer.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("de-DE"), "Observer", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Es existiert mindestens ein Subjekt")]
        public virtual void EsExistiertMindestensEinSubjekt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Es existiert mindestens ein Subjekt", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
 testRunner.Given("mindestens ein Subjekte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subjekte haben eine Register Methode, welche als einzigen Paramter ein Interface " +
            "entgegennimmt")]
        public virtual void SubjekteHabenEineRegisterMethodeWelcheAlsEinzigenParamterEinInterfaceEntgegennimmt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subjekte haben eine Register Methode, welche als einzigen Paramter ein Interface " +
                    "entgegennimmt", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("mindestens ein Subjekte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line 8
 testRunner.Then("haben Subjekte eine passende Register Methode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subjekte haben eine Unregister Methode, welche als einzigen Paramter ein Interfac" +
            "e entgegennimmt")]
        public virtual void SubjekteHabenEineUnregisterMethodeWelcheAlsEinzigenParamterEinInterfaceEntgegennimmt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subjekte haben eine Unregister Methode, welche als einzigen Paramter ein Interfac" +
                    "e entgegennimmt", ((string[])(null)));
#line 10
this.ScenarioSetup(scenarioInfo);
#line 11
 testRunner.Given("mindestens ein Subjekte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line 12
 testRunner.Then("haben Subjekte eine passende Unregister Methode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subjekte haben eine Update Methode, welche keinen Parameter entgegennimmt")]
        public virtual void SubjekteHabenEineUpdateMethodeWelcheKeinenParameterEntgegennimmt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subjekte haben eine Update Methode, welche keinen Parameter entgegennimmt", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("mindestens ein Subjekte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line 16
 testRunner.Then("haben Subjekte eine passende Update Methode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Observer kann sich bei Subjekt registieren und wird danach geupdated")]
        public virtual void ObserverKannSichBeiSubjektRegistierenUndWirdDanachGeupdated()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Observer kann sich bei Subjekt registieren und wird danach geupdated", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line 19
 testRunner.Given("mindestens ein Subjekte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line 20
 testRunner.Then("haben Subjekte eine passende Register Methode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line 21
 testRunner.Then("haben Subjekte eine passende Update Methode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line 22
 testRunner.When("sich bei allen Subjekten je ein Observer mit den Namen \"TestObserver\" registiert", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 23
 testRunner.When("Subjekte die Update Methode Aufrufen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 24
 testRunner.When("Subjekte die Update Methode Aufrufen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 25
 testRunner.Then("sollen alle Observer \"TestObserver\" \"2\" mal aufgerufen worden sein", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Observer kann sich bei Subjekt abmelden und wird danach nicht mehr geupdated")]
        public virtual void ObserverKannSichBeiSubjektAbmeldenUndWirdDanachNichtMehrGeupdated()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Observer kann sich bei Subjekt abmelden und wird danach nicht mehr geupdated", ((string[])(null)));
#line 27
this.ScenarioSetup(scenarioInfo);
#line 28
 testRunner.Given("mindestens ein Subjekte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line 29
 testRunner.Then("haben Subjekte eine passende Register Methode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line 30
 testRunner.Then("haben Subjekte eine passende Update Methode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line 31
 testRunner.Then("haben Subjekte eine passende Unregister Methode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line 32
 testRunner.When("sich bei allen Subjekten je ein Observer mit den Namen \"TestObserver\" registiert", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 33
 testRunner.When("Subjekte die Update Methode Aufrufen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 34
 testRunner.When("Subjekte die Update Methode Aufrufen", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 35
 testRunner.Then("sollen alle Observer \"TestObserver\" \"2\" mal aufgerufen worden sein", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
