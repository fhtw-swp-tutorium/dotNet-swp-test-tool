// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tests.ExerciseOne
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Observer")]
    public partial class ObserverFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Observer.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("de"), "Observer", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line 7
    testRunner.Given("eine Liste von Subjekten", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line 8
    testRunner.Then("darf diese Liste nicht leer sein", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Alle Subjekte sollen eine Methode zum Hinzufügen eines Beobachters bieten")]
        public virtual void AlleSubjekteSollenEineMethodeZumHinzufugenEinesBeobachtersBieten()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Alle Subjekte sollen eine Methode zum Hinzufügen eines Beobachters bieten", ((string[])(null)));
#line 10
    this.ScenarioSetup(scenarioInfo);
#line 6
  this.FeatureBackground();
#line 11
      testRunner.Then("sollen alle Subjekte eine Methode zum Hinzufügen bieten", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Alle Subjekte sollen eine Methode zum Entfernen eines Beobachters bieten")]
        public virtual void AlleSubjekteSollenEineMethodeZumEntfernenEinesBeobachtersBieten()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Alle Subjekte sollen eine Methode zum Entfernen eines Beobachters bieten", ((string[])(null)));
#line 13
    this.ScenarioSetup(scenarioInfo);
#line 6
  this.FeatureBackground();
#line 14
      testRunner.Then("sollen alle Subjekte eine Methode zum Entfernen bieten", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Alle Subjekte sollen eine Methode zum Aktualisieren aller Beobachters bieten")]
        public virtual void AlleSubjekteSollenEineMethodeZumAktualisierenAllerBeobachtersBieten()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Alle Subjekte sollen eine Methode zum Aktualisieren aller Beobachters bieten", ((string[])(null)));
#line 16
    this.ScenarioSetup(scenarioInfo);
#line 6
  this.FeatureBackground();
#line 17
      testRunner.Then("sollen alle Subjekte eine Methode zum Aktualisieren bieten", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Beobachter sollen aufgerufen werden, wenn sie registriert sind")]
        public virtual void BeobachterSollenAufgerufenWerdenWennSieRegistriertSind()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Beobachter sollen aufgerufen werden, wenn sie registriert sind", ((string[])(null)));
#line 19
    this.ScenarioSetup(scenarioInfo);
#line 6
  this.FeatureBackground();
#line 20
      testRunner.Given("ein Beobachter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line 21
      testRunner.When("sich dieser Beobachter registriert", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 22
      testRunner.And("die Method zum Aktualisieren aufgerufen wird", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 23
      testRunner.Then("soll der Beobachter aufgerufen werden", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Beobachter sollen nicht mehr aufgerufen werden, wenn sie sich vom Subjekt abmelde" +
            "n")]
        public virtual void BeobachterSollenNichtMehrAufgerufenWerdenWennSieSichVomSubjektAbmelden()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Beobachter sollen nicht mehr aufgerufen werden, wenn sie sich vom Subjekt abmelde" +
                    "n", ((string[])(null)));
#line 25
    this.ScenarioSetup(scenarioInfo);
#line 6
  this.FeatureBackground();
#line 26
      testRunner.Given("ein Beobachter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line 27
      testRunner.When("sich dieser Beobachter registriert", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 28
      testRunner.And("sich dieser Beobachter wieder abmeldet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 29
      testRunner.And("die Method zum Aktualisieren aufgerufen wird", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 30
      testRunner.Then("soll der Beobachter nicht aufgerufen worden sein", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
