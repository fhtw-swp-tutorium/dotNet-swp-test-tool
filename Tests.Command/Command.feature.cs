// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tests.Command
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Kommando")]
    public partial class KommandoFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Command.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("de"), "Kommando", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line 7
    testRunner.Given("eine Liste von Klassen mit dem Attribut \"Invoker\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Gegeben sei ");
#line 8
    testRunner.Then("darf diese Liste nicht leer sein", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Alle Invoker müssen genaue eine Methode mit dem Attribut \"InvokeCommand\" haben")]
        public virtual void AlleInvokerMussenGenaueEineMethodeMitDemAttributInvokeCommandHaben()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Alle Invoker müssen genaue eine Methode mit dem Attribut \"InvokeCommand\" haben", ((string[])(null)));
#line 10
    this.ScenarioSetup(scenarioInfo);
#line 6
  this.FeatureBackground();
#line 11
      testRunner.When("ich in jeder Klasse nach einer Methode mit dem Attribut \"InvokeCommand\" suche", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 12
      testRunner.Then("erwarte ich mir jeweils genau eine Methode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Jede Methode mit dem Attribut \"InvokeCommand\" darf genau ein Interface als Parame" +
            "ter nehmen")]
        public virtual void JedeMethodeMitDemAttributInvokeCommandDarfGenauEinInterfaceAlsParameterNehmen()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Jede Methode mit dem Attribut \"InvokeCommand\" darf genau ein Interface als Parame" +
                    "ter nehmen", ((string[])(null)));
#line 14
    this.ScenarioSetup(scenarioInfo);
#line 6
  this.FeatureBackground();
#line 15
      testRunner.When("ich in jeder Klasse nach einer Methode mit dem Attribut \"InvokeCommand\" suche", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 16
      testRunner.Then("muss jede Methode genau einen Parameter haben", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line 17
      testRunner.And("jeder Parameter muss ein Interface sein", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Jedes Kommando-Interface muss eine Implementierung haben")]
        public virtual void JedesKommando_InterfaceMussEineImplementierungHaben()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Jedes Kommando-Interface muss eine Implementierung haben", ((string[])(null)));
#line 19
    this.ScenarioSetup(scenarioInfo);
#line 6
  this.FeatureBackground();
#line 20
      testRunner.When("ich in jeder Klasse nach einer Methode mit dem Attribut \"InvokeCommand\" suche", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 21
      testRunner.Then("muss es für jeden Interface Parameter eine Implementierung geben", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Kommando soll ausgeführt werden, wenn es an Invoker übergeben wird")]
        public virtual void KommandoSollAusgefuhrtWerdenWennEsAnInvokerUbergebenWird()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Kommando soll ausgeführt werden, wenn es an Invoker übergeben wird", ((string[])(null)));
#line 23
    this.ScenarioSetup(scenarioInfo);
#line 6
  this.FeatureBackground();
#line 24
      testRunner.When("ich in jeder Klasse nach einer Methode mit dem Attribut \"InvokeCommand\" suche", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Wenn ");
#line 25
      testRunner.And("ich eine Instanz des Invokers erzeuge", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 26
      testRunner.And("ich eine dynamische Instanz des Kommandos erzeuge", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 27
      testRunner.And("dieses Kommando an den Invoker übergebe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Und ");
#line 28
      testRunner.Then("soll mindestens eine Methode des Kommandos aufgerufen werden", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dann ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
